# -*- coding: utf-8 -*-
"""customer_task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J6wcCPmOx2hfBk5vMy7LP1tj-2vEC2d_
"""

##Task2_Customer Segmentation using K-Means

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns  #used for making plots and better visualization
from sklearn.cluster import KMeans

#data collection and analysis
customer_data=pd.read_csv('/content/Mall_Customers.csv')
customer_data.head()

customer_data.shape

customer_data.info()

customer_data.isnull().sum() #to find missing values

# choosing annual income and spending score
X=customer_data.iloc[:,[3,4]].values  #:->slicing data  3rd and 4th column
print(X)

#choosing no of clusters
# WCSS->within clusters sum of squares , finds dis between centroid and points of the cluster
# Elbow method

wcss=[]

for i in range(1,11):
  kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42) #model used , random state->random selection
  kmeans.fit(X)
  # inertia->sum of squared distances of samples to their closest cluster center
  wcss.append(kmeans.inertia_)

#plotting elbow graph

sns.set()
plt.plot(range(1,11),wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""cluster -> 3 and 5 are elbow points as show a sudden drop in values"""

#optimum no of cluster =5

#Training The KMeans model

kmeans=KMeans(n_clusters=5,init='k-means++',random_state=0)

#Return a label for each datapoint wrt cluster

Y=kmeans.fit_predict(X)
print(Y)

"""5 clusters-> 0,1,2,3,4"""

#Visualization of all clusters

#Plotting of clusters and their centroids

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0],X[Y==0,1],s=50,c='green',label='Cluster 1')
plt.scatter(X[Y==1,0],X[Y==1,1],s=50,c='red',label='Cluster 2')
plt.scatter(X[Y==2,0],X[Y==2,1],s=50,c='blue',label='Cluster 3')
plt.scatter(X[Y==3,0],X[Y==3,1],s=50,c='orange',label='Cluster 4')
plt.scatter(X[Y==4,0],X[Y==4,1],s=50,c='yellow',label='Cluster 5')
#plotting centroid
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='black',label='Centroids') #0-> Xaxis,1-> Yaxis

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

